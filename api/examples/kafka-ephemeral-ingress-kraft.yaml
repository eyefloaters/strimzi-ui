apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaNodePool
metadata:
  name: dual-role
  labels:
    strimzi.io/cluster: ${cluster_name}
spec:
  replicas: 3
  roles:
    - controller
    - broker
  storage:
    type: jbod
    volumes:
      - id: 0
        type: persistent-claim
        size: 1Gi
        deleteClaim: false
---
apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: ${cluster_name}
  annotations:
    strimzi.io/node-pools: enabled
    strimzi.io/kraft: enabled
spec:
  kafka:
    version: 3.6.0
    replicas: 3
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 75m
        memory: 1Gi
    authorization:
      type: simple
    listeners:
      - name: secure
        port: 9092
        type: ingress
        tls: true
        configuration:
          bootstrap:
            host: bootstrap.${cluster_name}.${kube_ip}.nip.io
          brokers:
          - broker: 0
            host: broker-0.${cluster_name}.${kube_ip}.nip.io
          - broker: 1
            host: broker-1.${cluster_name}.${kube_ip}.nip.io
          - broker: 2
            host: broker-2.${cluster_name}.${kube_ip}.nip.io
      # OAUTH LISTENER BEGIN
      - name: oauth
        port: 9093
        type: ingress
        tls: true
        configuration:
          bootstrap:
            host: bootstrap-oauth.${cluster_name}.${kube_ip}.nip.io
            annotations:
              "streamshub.github.com/console-listener": "true"
          brokers:
          - broker: 0
            host: broker-0-oauth.${cluster_name}.${kube_ip}.nip.io
          - broker: 1
            host: broker-1-oauth.${cluster_name}.${kube_ip}.nip.io
          - broker: 2
            host: broker-2-oauth.${cluster_name}.${kube_ip}.nip.io
        authentication:
          jwksEndpointUri: "${keycloak_realm_url}/protocol/openid-connect/certs"
          type: oauth
          userNameClaim: preferred_username
          validIssuerUri: "${keycloak_realm_url}"
      # OAUTH LISTENER END
    config:
      offsets.topic.replication.factor: 3
      transaction.state.log.replication.factor: 3
      transaction.state.log.min.isr: 2
      default.replication.factor: 3
      min.insync.replicas: 2
      inter.broker.protocol.version: "3.5"
      allow.everyone.if.no.acl.found: "true"
    storage:
      volumes:
      - type: "persistent-claim"
        size: "1Gi"
        deleteClaim: true
        id: 0
      type: "jbod"
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          name: ${cluster_name}-kafka-metrics
          key: kafka-metrics-config.yml
  # The ZooKeeper section is required by the Kafka CRD schema while the UseKRaft feature gate is in alpha phase.
  # But it will be ignored when running in KRaft mode
  zookeeper:
    replicas: 3
    resources:
      limits:
        cpu: 200m
        memory: 512Mi
      requests:
        cpu: 75m
        memory: 512Mi
    storage:
      type: persistent-claim
      size: 1Gi
      deleteClaim: false
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          name: ${cluster_name}-kafka-metrics
          key: zookeeper-metrics-config.yml
  entityOperator:
    topicOperator: {}
    userOperator: {}
